<div className="min-h-screen bg-gray-50 py-8 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Find Your Perfect Stay</h1>
          <p className="text-lg text-gray-600">
            Browse our collection of exceptional accommodations
          </p>
        </div>
=======
  return (
    <div className="min-h-screen bg-gradient-to-b from-black/80 via-black/30 to-black/80 py-8 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto bg-white rounded-lg shadow-lg p-6">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-extrabold bg-gradient-to-r from-green-500 to-teal-500 bg-clip-text text-transparent mb-2">
            Find Your Perfect Stay
          </h1>
          <p className="text-lg text-gray-600">
            Browse our collection of exceptional accommodations
          </p>
        </div>
>>>>>>> REPLACE

<<<<<<< SEARCH
                placeholder="Search by property name or location..."
                className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
              />
              <Search className="absolute left-3 top-2.5 h-5 w-5 text-gray-400" />
            </div>
          </div>
=======
                placeholder="Search by property name or location..."
                className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-green-500 focus:border-teal-500"
              />
              <Search className="absolute left-3 top-2.5 h-5 w-5 text-gray-400" />
            </div>
          </div>
>>>>>>> REPLACE

<<<<<<< SEARCH
                className="border border-gray-300 rounded-lg py-2 px-3 focus:ring-blue-500 focus:border-blue-500 text-sm"
              >
                <option value="0-1000">Any Price</option>
                <option value="0-100">Under $100</option>
                <option value="100-200">$100-$200</option>
                <option value="200-300">$200-$300</option>
                <option value="300-1000">$300+</option>
              </select>

              <select
                value={rating}
                onChange={(e) => setRating(Number(e.target.value))}
                className="border border-gray-300 rounded-lg py-2 px-3 focus:ring-blue-500 focus:border-blue-500 text-sm"
              >
                <option value={0}>Any Rating</option>
                <option value={3}>3+ Stars</option>
                <option value={4}>4+ Stars</option>
                <option value={4.5}>4.5+ Stars</option>
              </select>

              <select
                value={selectedPropertyType}
                onChange={(e) => setSelectedPropertyType(e.target.value)}
                className="border border-gray-300 rounded-lg py-2 px-3 focus:ring-blue-500 focus:border-blue-500 text-sm"
              >
                {propertyTypes.map(type => (
                  <option key={type} value={type}>
                    {type === 'all' ? 'All Types' : type.split('_').map(word => 
                      word.charAt(0).toUpperCase() + word.slice(1)
                    ).join(' ')}
                  </option>
                ))}
              </select>
            </div>
          </div>
        </div>

        {/* Results Count */}
        <div className="mb-4 text-sm text-gray-600">
          Showing {filteredProperties.length} {filteredProperties.length === 1 ? 'property' : 'properties'}
        </div>

        {/* Properties Grid */}
        {loading ? (
          <div className="flex justify-center items-center h-64">
            <Loader2 className="h-12 w-12 animate-spin text-blue-600" />
            <span className="ml-2">Loading properties...</span>
          </div>
        ) : currentProperties.length > 0 ? (
          <>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {currentProperties.map((property) => (
                <div
                  key={property.id}
                  className="bg-white rounded-lg shadow-sm overflow-hidden hover:shadow-md transition-all duration-200"
                >
                  <div className="relative h-48">
                    <img
                      src={property.photos[0] || '/placeholder-hotel.jpg'}
                      alt={property.property_name}
                      className="w-full h-full object-cover"
                      onError={(e) => {
                        (e.target as HTMLImageElement).src = '/placeholder-hotel.jpg';
                      }}
                    />
                    <div className="absolute top-3 right-3 bg-white rounded-full px-2 py-1 flex items-center text-sm">
                      <Star className="h-4 w-4 text-yellow-400 mr-1" />
                      <span>{property.rating.toFixed(1)}</span>
                    </div>
                  </div>
                  <div className="p-4">
                    <div className="flex justify-between items-start">
                      <div>
                        <h3 className="font-semibold text-gray-900">{property.property_name}</h3>
                        <div className="flex items-center text-sm text-gray-500 mt-1">
                          <MapPin className="h-4 w-4 mr-1" />
                          <span>{property.location}</span>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="font-bold text-blue-600">
                          {formatCurrency(property.base_price, property.currency)}
                          {property.discount && (
                            <span className="text-xs text-gray-500 line-through ml-1">
                              {formatCurrency(property.base_price + (property.discount || 0), property.currency)}
                            </span>
                          )}
                        </div>
                        <div className="text-xs text-gray-500">per night</div>
                      </div>
                    </div>

                    <div className="mt-3 text-sm text-gray-600">
                      {property.room_type.split('_').map(word => 
                        word.charAt(0).toUpperCase() + word.slice(1)
                      ).join(' ')} • {property.bed_count} {property.bed_count === 1 ? 'bed' : 'beds'} • {property.bathroom_count} {property.bathroom_count === 1 ? 'bath' : 'baths'}
                    </div>

                    <div className="mt-3 flex flex-wrap gap-1">
                      {property.amenities.slice(0, 3).map((amenity, i) => (
                        <span
                          key={i}
                          className="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded flex items-center"
                        >
                          {renderAmenityIcon(amenity)}
                          {amenity.replace('_', ' ')}
                        </span>
                      ))}
                      {property.amenities.length > 3 && (
                        <span className="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded">
                          +{property.amenities.length - 3} more
                        </span>
                      )}
                    </div>

                    {property.cancellation_policy.toLowerCase().includes('free') && (
                      <div className="mt-2 text-xs text-green-600">
                        Free cancellation available
                      </div>
                    )}

                    <Link
                      to={`/properties/${property.id}`}
                      className="mt-4 block w-full bg-blue-600 hover:bg-blue-700 text-white text-center px-4 py-2 rounded-lg text-sm transition-colors"
                    >
                      View Details
                    </Link>
                  </div>
                </div>
              ))}
            </div>

            {/* Pagination */}
            {totalPages > 1 && (
              <div className="flex justify-center mt-8">
                <nav className="flex items-center gap-1">
                  <button
                    onClick={() => paginate(Math.max(1, currentPage - 1))}
                    disabled={currentPage === 1}
                    className="px-3 py-1 rounded border border-gray-300 disabled:opacity-50"
                  >
                    Previous
                  </button>
                  
                  {Array.from({ length: totalPages }, (_, i) => i + 1).map(number => (
                    <button
                      key={number}
                      onClick={() => paginate(number)}
                      className={`px-3 py-1 rounded ${currentPage === number ? 'bg-blue-600 text-white' : 'border border-gray-300'}`}
                    >
                      {number}
                    </button>
                  ))}
                  
                  <button
                    onClick={() => paginate(Math.min(totalPages, currentPage + 1))}
                    disabled={currentPage === totalPages}
                    className="px-3 py-1 rounded border border-gray-300 disabled:opacity-50"
                  >
                    Next
                  </button>
                </nav>
              </div>
            )}
          </>
        ) : (
          <div className="bg-white rounded-lg shadow-sm p-8 text-center">
            <UserCircle className="h-16 w-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">No properties found</h3>
            <p className="text-gray-600">
              Try adjusting your search criteria or filters to find more options
            </p>
          </div>
        )}
      </div>
    </div>
  );
};
=======
                className="border border-gray-300 rounded-lg py-2 px-3 focus:ring-green-500 focus:border-teal-500 text-sm"
              >
                <option value="0-1000">Any Price</option>
                <option value="0-100">Under $100</option>
                <option value="100-200">$100-$200</option>
                <option value="200-300">$200-$300</option>
                <option value="300-1000">$300+</option>
              </select>

              <select
                value={rating}
                onChange={(e) => setRating(Number(e.target.value))}
                className="border border-gray-300 rounded-lg py-2 px-3 focus:ring-green-500 focus:border-teal-500 text-sm"
              >
                <option value={0}>Any Rating</option>
                <option value={3}>3+ Stars</option>
                <option value={4}>4+ Stars</option>
                <option value={4.5}>4.5+ Stars</option>
              </select>

              <select
                value={selectedPropertyType}
                onChange={(e) => setSelectedPropertyType(e.target.value)}
                className="border border-gray-300 rounded-lg py-2 px-3 focus:ring-green-500 focus:border-teal-500 text-sm"
              >
                {propertyTypes.map(type => (
                  <option key={type} value={type}>
                    {type === 'all' ? 'All Types' : type.split('_').map(word => 
                      word.charAt(0).toUpperCase() + word.slice(1)
                    ).join(' ')}
                  </option>
                ))}
              </select>
            </div>
          </div>
        </div>

        {/* Results Count */}
        <div className="mb-4 text-sm text-gray-600">
          Showing {filteredProperties.length} {filteredProperties.length === 1 ? 'property' : 'properties'}
        </div>

        {/* Properties Grid */}
        {loading ? (
          <div className="flex justify-center items-center h-64">
            <Loader2 className="h-12 w-12 animate-spin text-green-500" />
            <span className="ml-2 text-white">Loading properties...</span>
          </div>
        ) : currentProperties.length > 0 ? (
          <>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {currentProperties.map((property) => (
                <div
                  key={property.id}
                  className="bg-white rounded-lg shadow-sm overflow-hidden hover:shadow-md transition-all duration-200"
                >
                  <div className="relative h-48">
                    <img
                      src={property.photos[0] || '/placeholder-hotel.jpg'}
                      alt={property.property_name}
                      className="w-full h-full object-cover"
                      onError={(e) => {
                        (e.target as HTMLImageElement).src = '/placeholder-hotel.jpg';
                      }}
                    />
                    <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-transparent to-transparent"></div>
                    <div className="absolute top-3 right-3 bg-white rounded-full px-2 py-1 flex items-center text-sm">
                      <Star className="h-4 w-4 text-yellow-400 mr-1" />
                      <span>{property.rating.toFixed(1)}</span>
                    </div>
                  </div>
                  <div className="p-4">
                    <div className="flex justify-between items-start">
                      <div>
                        <h3 className="font-semibold text-black">{property.property_name}</h3>
                        <div className="flex items-center text-sm text-gray-600 mt-1">
                          <MapPin className="h-4 w-4 mr-1" />
                          <span>{property.location}</span>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="font-bold text-green-600">
                          {formatCurrency(property.base_price, property.currency)}
                          {property.discount && (
                            <span className="text-xs text-gray-500 line-through ml-1">
                              {formatCurrency(property.base_price + (property.discount || 0), property.currency)}
                            </span>
                          )}
                        </div>
                        <div className="text-xs text-gray-600">per night</div>
                      </div>
                    </div>

                    <div className="mt-3 text-sm text-gray-600">
                      {property.room_type.split('_').map(word => 
                        word.charAt(0).toUpperCase() + word.slice(1)
                      ).join(' ')} • {property.bed_count} {property.bed_count === 1 ? 'bed' : 'beds'} • {property.bathroom_count} {property.bathroom_count === 1 ? 'bath' : 'baths'}
                    </div>

                    <div className="mt-3 flex flex-wrap gap-1">
                      {property.amenities.slice(0, 3).map((amenity, i) => (
                        <span
                          key={i}
                          className="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded flex items-center"
                        >
                          {renderAmenityIcon(amenity)}
                          {amenity.replace('_', ' ')}
                        </span>
                      ))}
                      {property.amenities.length > 3 && (
                        <span className="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded">
                          +{property.amenities.length - 3} more
                        </span>
                      )}
                    </div>

                    {property.cancellation_policy.toLowerCase().includes('free') && (
                      <div className="mt-2 text-xs text-green-600">
                        Free cancellation available
                      </div>
                    )}

                    <Link
                      to={`/properties/${property.id}`}
                      className="mt-4 block w-full bg-gradient-to-r from-green-400 to-teal-400 hover:from-green-500 hover:to-teal-500 text-white text-center px-4 py-2 rounded-lg text-sm transition-colors"
                    >
                      View Details
                    </Link>
                  </div>
                </div>
              ))}
            </div>

            {/* Pagination */}
            {totalPages > 1 && (
              <div className="flex justify-center mt-8">
                <nav className="flex items-center gap-1">
                  <button
                    onClick={() => paginate(Math.max(1, currentPage - 1))}
                    disabled={currentPage === 1}
                    className="px-3 py-1 rounded border border-gray-300 disabled:opacity-50 text-gray-700 hover:text-green-600 hover:border-green-600"
                  >
                    Previous
                  </button>
                  
                  {Array.from({ length: totalPages }, (_, i) => i + 1).map(number => (
                    <button
                      key={number}
                      onClick={() => paginate(number)}
                      className={`px-3 py-1 rounded ${
                        currentPage === number
                          ? 'bg-gradient-to-r from-green-400 to-teal-400 text-white'
                          : 'border border-gray-300 text-gray-700 hover:text-green-600 hover:border-green-600'
                      }`}
                    >
                      {number}
                    </button>
                  ))}
                  
                  <button
                    onClick={() => paginate(Math.min(totalPages, currentPage + 1))}
                    disabled={currentPage === totalPages}
                    className="px-3 py-1 rounded border border-gray-300 disabled:opacity-50 text-gray-700 hover:text-green-600 hover:border-green-600"
                  >
                    Next
                  </button>
                </nav>
              </div>
            )}
          </>
        ) : (
          <div className="bg-white rounded-lg shadow-sm p-8 text-center">
            <UserCircle className="h-16 w-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-black mb-2">No properties found</h3>
            <p className="text-gray-600">
              Try adjusting your search criteria or filters to find more options
            </p>
          </div>
        )}
      </div>
    </div>
  );
};
